<?php

/**
 * @file
 * Code for the Farnet communities feature.
 */

include_once 'farnet_communities.features.inc';

/**
 * Implements hook_menu().
 */
function farnet_communities_menu() {
  $items['node/%node/push'] = array(
    'title' => 'Push to public site',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['_farnet_communities_push_form', 1],
    'access callback' => '_farnet_communities_push_access',
    'access arguments' => [1],
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
  );

  $items['admin/config/group/push_content'] = array(
    'title' => 'Push to public site',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['_farnet_communities_push_form_admin'],
    'access callback' => 'user_access',
    'access arguments' => ['administer content'],
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );

  $items['group/node/%node/admin/people/%user/reject'] = array(
    'title' => 'Reject user join request',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['_farnet_communities_user_reject', 2, 5],
    'access callback' => '_farnet_communities_is_group_admin',
    'access arguments' => [2],
  );

  $items['myfarnet'] = array(
    'title' => 'myFARNET',
    'page callback' => '_farnet_communities_myfarnet',
    'access callback' => 'user_is_logged_in',
    'menu_name' => 'main-menu',
    'weight' => 10,
  );

  $items['community/%community/preview'] = array(
    'title' => 'Preview community',
    'page callback' => '_farnet_communities_community_preview',
    'page arguments' => [1],
    'access callback' => 'user_access',
    'access arguments' => ['access content'],
  );

  $items['community/%community/members'] = array(
    'title' => 'Members',
    'page callback' => 'farnet_communities_display_views',
    'page arguments' => array('farnet_communities_members', 'page', 1),
    'access arguments' => array('access private area'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-community-menu',
    'weight' => 10,
    'file' => 'farnet_communities.callback.inc',
    'file path' => drupal_get_path('module', 'farnet_communities'),
  );

  return $items;
}

/**
 * Return an empty page for myfarnet dashboard.
 */
function _farnet_communities_myfarnet() {
  return '';
}

/**
 * Configure the content types that can be pushed to the public site.
 */
function _farnet_communities_push_form_admin($form, &$form_state) {
  $group_content_types = og_get_all_group_content_bundle();

  $form['farnet_communities_push_public_bundles'] = [
    '#type' => 'select',
    '#title' => t('Content types'),
    '#multiple' => TRUE,
    '#options' => $group_content_types['node'],
    '#default_value' => variable_get('farnet_communities_push_public_bundles', []),
    '#description' => t('Set the content types that can be pushed to the public site.'),
  ];

  return system_settings_form($form);
}

/**
 * Push a node to the public site.
 */
function _farnet_communities_push_form($form, &$form_state, $node) {
  $form['confirm_text'] = [
    '#markup' => t('Are you sure you want to push the node "<i>@node</i>" to the public site ?', ['@node' => $node->title]),
    '#prefix' => '<div>',
    '#suffix' => '</div>',
  ];

  $form['nid'] = [
    '#type' => 'hidden',
    '#value' => $node->nid,
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Confirm'),
  ];

  return $form;
}

/**
 * Submit function for the node push functionality.
 */
function farnet_communities_push_form_submit($form, &$form_state) {
  $node = node_load($form_state['values']['nid']);

  // Go back to original node page.
  $form_state['redirect'] = 'node/' . $node->nid;

  // Remove the node id and version id to create a new node.
  $node->status = 0;
  unset($node->nid);
  unset($node->vid);
  unset($node->workbench_moderation);
  $node->workbench_moderation_state_new = 'needs_review';

  // Remove OG group.
  unset($node->og_group_ref);

  // Reactivate pathauto URL generation.
  $node->path = ['pathauto' => TRUE];

  // Create the node.
  node_save($node);

  // Link to the new node.
  drupal_set_message(t('The content has been duplicated to a public version available at !link.', ['!link' => l($node->title, 'node/' . $node->nid)]), 'status');
}

/**
 * Check if a node can be pushed to the public site.
 */
function _farnet_communities_push_access($node) {
  // In case a nid was passed as param.
  if (ctype_digit($node)) {
    $node = node_load($node);
  }

  // Check the status.
  if ((bool) $node->status !== TRUE) {
    return FALSE;
  }

  // Check the node type.
  $can_push = variable_get('farnet_communities_push_public_bundles', []);

  if (!in_array($node->type, $can_push) || empty($node->og_group_ref)) {
    return FALSE;
  }

  // Check if the user can administer at least one group of this node.
  if (!user_access('administer content')) {
    $has_access = FALSE;
    foreach ($node->og_group_ref[LANGUAGE_NONE] as $group) {
      if (og_user_access('node', $group['target_id'], 'administer group')) {
        $has_access = TRUE;
        break;
      }
    }

    if ($has_access === FALSE) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Check if current user is admin of current group.
 */
function _farnet_communities_is_group_admin($node) {
  return og_user_access('node', $node->nid, 'administer group');
}

/**
 * Implements hook_node_access_records().
 */
function farnet_communities_node_access_records($node) {
  $grants = array();

  if ($node->type == 'community_public' || $node->type == 'community_private') {
    $grants[] = array(
      'realm' => 'farnet_communities',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
  }

  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function farnet_communities_node_grants($account, $op) {
  if ($op != 'view') {
    return;
  }
  $grants = array();

  if ($account->uid == 0) {
    $grants['farnet_communities'][] = 0;
  }
  else {
    $grants['farnet_communities'][] = 1;
  }

  return $grants;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function farnet_communities_form_node_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'community_public_node_form') {
    $form['group_access'][LANGUAGE_NONE]['#disabled'] = TRUE;
    $form['group_access'][LANGUAGE_NONE]['#type'] = 'hidden';
    $form['group_access'][LANGUAGE_NONE]['#value'] = '0';
  }

  if ($form_id == 'community_private_node_form' || $form_id == 'community_hidden_node_form') {
    $form['group_access'][LANGUAGE_NONE]['#disabled'] = TRUE;
    $form['group_access'][LANGUAGE_NONE]['#type'] = 'hidden';
    $form['group_access'][LANGUAGE_NONE]['#value'] = '1';
  }

  $og_exclude = [
    'nexteuropa_news_node_form',
    'page',
    'nexteuropa_event_node_form',
  ];

  if (in_array($form_id, $og_exclude)) {
    $form['og_group_ref']['#access'] = FALSE;
    $form['group_content_access']['#access'] = FALSE;
  }
}

/**
 * Implements hook_context_load_alter().
 */
function farnet_communities_context_load_alter(&$context) {
  if ($context->name === 'communities' && isset($context->reactions['block'])) {
    $path = current_path();
    $patterns = '' . PHP_EOL . 'community/*/preview';
    if (drupal_match_path($path, $patterns)) {
      if (isset($context->reactions['block']['blocks']['menu-menu-community-menu'])) {
        unset($context->reactions['block']['blocks']['menu-menu-community-menu']);
      }
      if (isset($context->reactions['block']['blocks']['multisite_og_button-og-contextual-links'])) {
        unset($context->reactions['block']['blocks']['multisite_og_button-og-contextual-links']);
      }
    }
    if (isset($context->reactions['block']['blocks']['views-community_members-block_1'])) {
      unset($context->reactions['block']['blocks']['views-community_members-block_1']);
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function farnet_communities_views_pre_render(&$view) {
  if ($view->current_display === 'block_members_list') {
    $title = str_replace(' ', '-', drupal_strtolower($view->build_info['substitutions']['%1']));
    // Set to use 'custom_url'.
    $view->display_handler->set_option('link_display', 'custom_url');
    // Change the link url.
    $view->display_handler->set_option('link_url', 'community/' . $title . '/members-list');
  }
  elseif ($view->name === 'farnet_communities') {
    foreach ($view->result as &$result) {
      // Only alter join link.
      if (isset($result->field_group_group[0]['rendered']['#href']) && strpos($result->field_group_group[0]['rendered']['#href'], 'unsubscribe') !== FALSE) {
        continue;
      }
      if ($result->_field_data['nid']['entity']->type === 'community_public') {
        $title = t('Join');
      }
      else {
        $title = t('Ask to join');
      }

      $result->field_group_group[0]['rendered']['#title'] = $title;
    }
  }
}

/**
 * Calculate the last updated date of a node for a group.
 */
function _farnet_communities_get_last_updated_date($gid) {
  $nids = db_query("SELECT etid FROM {og_membership} WHERE entity_type='node' AND gid=:gid", [':gid' => $gid])->fetchCol();

  if (!empty($nids)) {
    $update_date = db_query("SELECT MAX(changed) FROM {node} WHERE nid IN (:nids)", [':nids' => $nids])->fetchField();

    if (!is_null($update_date) && $update_date) {
      return format_date($update_date, 'date_only');
    }
  }

  return FALSE;
}

/**
 * Implements hook_block_view_alter().
 */
function farnet_communities_block_view_alter(&$data, $block) {
  switch ($block->bid) {
    // Exclude content types from the og content creation button.
    case 'multisite_og_button-og-contextual-links':
      // Get allowed content types.
      $allowed = og_content_type_admin_access_group();
      // For each CT in the create button, check the access.
      $items = &$data['content']['og_node_create_links']['#items'];
      if (!empty($items)) {
        foreach ($items as $key => &$item) {
          // Use a regexp to get the content type from the node/add url.
          $matches = [];
          preg_match_all("/\/node\/add\/([a-zA-Z0-9-]*)_/", $item['data'], $matches);
          $content_type = reset($matches[1]);
          // Change the hyphen back to underscores.
          $content_type = str_replace('-', '_', $content_type);
          // Exclude if necessary.
          if (!array_key_exists($content_type, $allowed)) {
            unset($items[$key]);
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_rules_action_info().
 */
function farnet_communities_rules_action_info() {
  $items = array();
  $items['farnet_communities_get_admins'] = array(
    'label' => t('Get group administrators from group audience'),
    'group' => t('FARNET Communities'),
    'parameter' => array(
      'group_content' => array(
        'type' => 'entity',
        'label' => t('Group content'),
        'description' => t('The group content determining the group audience.'),
      ),
    ),
    'provides' => array(
      'group_managers' => array('type' => 'list<user>', 'label' => t('List of group managers')),
    ),
    'base' => '_farnet_communities_get_admins',
    'access callback' => 'og_rules_integration_access',
  );

  return $items;
}

/**
 * Action: Get group admins from a group.
 */
function _farnet_communities_get_admins(EntityDrupalWrapper $group) {
  $entity_type = $group->type();
  $entity_id = $group->getIdentifier();

  // Not a group.
  if (!og_is_group($entity_type, $group)) {
    return;
  }

  // Get the group roles.
  $roles = og_roles($entity_type, $group->getBundle(), $entity_id);
  $admin_rid = array_search(OG_ADMINISTRATOR_ROLE, $roles);

  // Bail out if we can't figure out the admin role id.
  if (!$admin_rid) {
    return;
  }

  $admins = array();

  // Get the group admins for the group.
  $members = db_select('og_users_roles', 'our')
    ->fields('our', array('uid'))
    ->condition('our.gid', $entity_id)
    ->condition('our.group_type', $entity_type)
    ->condition('our.rid', $admin_rid)
    ->execute()
    ->fetchCol();

  $admins = array_merge($admins, $members);

  // Remove duplicate items.
  $admins = array_keys(array_flip($admins));

  return array('group_managers' => $admins);
}

/**
 * Calculate the number of discussion in a community.
 */
function _farnet_communities_discussion_count($gid) {
  $nids = db_query("SELECT etid FROM {og_membership} WHERE entity_type='node' AND gid=:gid", [':gid' => $gid])->fetchCol();

  if (!empty($nids)) {
    $params = [
      ':nids' => $nids,
      ':type' => 'myfarnet_discussion',
      ':status' => NODE_PUBLISHED,
    ];
    $count = db_query("SELECT COUNT(nid) FROM {node} WHERE nid IN (:nids) AND type=:type AND status=:status", $params)->fetchField();

    if (!is_null($count) && $count) {
      return $count;
    }
  }

  return 0;
}

/**
 * Implements hook_og_membership_update().
 */
function farnet_communities_og_membership_update(OgMembership $ogm) {
  if ($ogm->entity_type === 'user' && $ogm->state == OG_STATE_BLOCKED && $ogm->state !== $ogm->original->state) {
    // Override the destination.
    $_GET['destination'] = "group/node/{$ogm->gid}/admin/people/{$ogm->etid}/reject";
    drupal_goto();
  }
}

/**
 * Reject a user request for joining a group.
 */
function _farnet_communities_user_reject($form, &$form_state, $node, $user) {
  $username = _farnet_communities_get_username($user);
  drupal_set_title(t("Refuse join request of '@user'", ['@user' => $username]));

  $form['user'] = [
    '#type' => 'hidden',
    '#value' => $user->uid,
  ];

  $form['node'] = [
    '#type' => 'hidden',
    '#value' => $node->nid,
  ];

  $form['justification'] = [
    '#title' => t('Justification'),
    '#type' => 'textarea',
    '#required' => TRUE,
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Reject'),
  ];

  return $form;
}

/**
 * Deny a user request.
 */
function _farnet_communities_user_reject_submit($form, $form_state) {
  global $base_url;

  $user = user_load($form_state['values']['user']);
  $justification = check_plain($form_state['values']['justification']);
  $node = node_load($form_state['values']['node']);

  $username = _farnet_communities_get_username($user);

  drupal_set_message(t('The user will be notified of your decision.'));

  // Send mail to end user.
  $params = [
    '@url' => $base_url,
    '@username' => $username,
    '@justification' => $justification,
    '@group' => $node->title,
  ];
  drupal_mail('farnet_communities', 'refuse', $user->mail, 'en', $params);

  // Redirect to list of people.
  drupal_goto("group/node/{$node->nid}/admin/people/");
}

/**
 * Build a username from first and last name.
 */
function _farnet_communities_get_username($user) {
  $u = entity_metadata_wrapper('user', $user);
  $username = $u->field_firstname->value() . ' ' . $u->field_lastname->value();
  return empty(trim($username)) ? $u->name->value() : $username;
}

/**
 * Implements hook_mail().
 */
function farnet_communities_mail($key, &$message, $params) {
  if (isset($params['headers']) && is_array($params['headers'])) {
    $message['headers'] += $params['headers'];
  }

  // Include mail body.
  ob_start();
  include drupal_get_path('module', 'farnet_communities') . '/mails/' . $key . '_mail.php';
  $body = ob_get_clean();

  $message['body'] = [format_string($body, $params)];

  switch ($key) {
    case 'refuse':
      $message['subject'] = t('myFARNET membership request rejected');
      break;
  }
}

/**
 * Render node light for preview without context communities.
 */
function _farnet_communities_community_preview($community) {
  unset($community->group_access);
  return node_page_view($community);
}

/**
 * Check that a menu item in a community is accessible.
 *
 * @param string $right
 *   The basic access right to check.
 * @param object $group
 *   The current og group.
 * @param string $content_type
 *   The content type we're trying to access.
 *
 * @return bool
 *   Return TRUE if the user has access.
 */
function _farnet_communities_ct_page_access($right, $group, $content_type) {
  if (!user_access($right) || !isset($group->nid)) {
    return FALSE;
  }

  // Check content types allowed in configuration.
  $allowed = og_content_type_admin_access_group();
  if (!isset($allowed[$content_type])) {
    return FALSE;
  }

  // Check if some content exists.
  $query = db_select('og_membership', 'ogm')
    ->fields('ogm')
    ->condition('ogm.entity_type', 'node', '=')
    ->condition('ogm.gid', $group->nid, '=');

  $query->leftJoin('node', 'n', 'n.nid = ogm.etid');
  $result = $query->condition('n.type', $content_type, '=')
    ->execute();

  return $result->rowCount() > 0;
}

/**
 * Implements hook_comment_insert().
 */
function farnet_communities_comment_insert($comment) {
  global $user;
  $node = node_load($comment->nid);
  if (isset($node->og_group_ref)) {
    $gid = $node->og_group_ref[LANGUAGE_NONE][0]['target_id'];
    farnet_communities_insert_user_contribution($user->uid, $comment->nid, $gid, 'comment');
  }
}

/**
 * Implements hook_node_insert().
 */
function farnet_communities_node_insert($node) {
  global $user;
  if (isset($node->og_group_ref) && $node->status === NODE_PUBLISHED) {
    $gid = $node->og_group_ref[LANGUAGE_NONE][0]['target_id'];
    farnet_communities_insert_user_contribution($user->uid, $node->nid, $gid, 'node_insert');
  }
}

/**
 * Implements hook_og_membership_update().
 */
function farnet_communities_og_membership_update(OgMembership $og_membership) {
  if ($og_membership->state == OG_STATE_ACTIVE) {
    farnet_communities_insert_user_contribution($og_membership->etid, 0, $og_membership->gid, 'join');
  }
}

/**
 * Implements hook_og_membership_insert().
 */
function farnet_communities_og_membership_insert(OgMembership $og_membership) {
  if ($og_membership->state === OG_STATE_ACTIVE) {
    farnet_communities_insert_user_contribution($og_membership->etid, 0, $og_membership->gid, 'join');
  }
}

/**
 * Implements hook_node_update().
 */
function farnet_communities_node_update($node) {
  global $user;
  // Check that the node is not new.
  if (isset($node->revision) && $node->revision === TRUE && isset($node->og_group_ref) && $node->status === NODE_PUBLISHED) {
    $gid = $node->og_group_ref[LANGUAGE_NONE][0]['target_id'];
    farnet_communities_insert_user_contribution($user->uid, $node->nid, $gid, 'node_update');
  }
}

/**
 * Insert a last contribution.
 */
function farnet_communities_insert_user_contribution($uid, $nid, $gid, $action) {
  if (!is_null($gid)) {
    db_merge('user_last_contribution')
      ->key(['uid' => $uid, 'gid' => $gid])
      ->fields([
        'uid' => $uid,
        'nid' => $nid,
        'gid' => $gid,
        'action' => $action,
        'timestamp' => time(),
      ])
      ->execute();
  }
}
