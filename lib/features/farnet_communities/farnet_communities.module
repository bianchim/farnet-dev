<?php

/**
 * @file
 * Code for the Farnet communities feature.
 */

include_once 'farnet_communities.features.inc';

/**
 * Implements hook_node_access_records().
 */
function farnet_communities_node_access_records($node) {
  $grants = array();

  if ($node->type == 'community_public' || $node->type == 'community_private') {
    $grants[] = array(
      'realm' => 'farnet_communities',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
  }

  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function farnet_communities_node_grants($account, $op) {
  if ($op != 'view') {
    return;
  }
  $grants = array();

  if ($account->uid == 0) {
    $grants['farnet_communities'][] = 0;
  }
  else {
    $grants['farnet_communities'][] = 1;
  }

  return $grants;
}

/**
 * Implements hook_form_alter().
 */
function farnet_communities_form_alter(&$form, &$form_state, $form_id) {
  $form_ids_pushable_to_public = array();
  $form_ids_pushable_to_public[] = 'nexteuropa_event_node_form';
  $form_ids_pushable_to_public[] = 'nexteuropa_news_node_form';
  $form_ids_pushable_to_public[] = 'cooperation_call_node_form';
  $form_ids_pushable_to_public[] = 'cooperation_idea_node_form';
  $form_ids_pushable_to_public[] = 'gp_method_node_form';
  $form_ids_pushable_to_public[] = 'gp_project_node_form';
  $form_ids_pushable_to_public[] = 'gp_short_story_node_form';
  if ($form_id == 'community_public_node_form') {
    $form['group_access']['und']['#disabled'] = TRUE;
    $form['group_access']['und']['#type'] = 'hidden';
    $form['group_access']['und']['#value'] = '0';
  }
  if ($form_id == 'community_private_node_form' || $form_id == 'community_hidden_node_form') {
    $form['group_access']['und']['#disabled'] = TRUE;
    $form['group_access']['und']['#type'] = 'hidden';
    $form['group_access']['und']['#value'] = '1';
  }
  if (in_array($form_id, $form_ids_pushable_to_public)) {
    $form['group_content_access']['und']['#type'] = 'hidden';
    if (!empty($form['og_group_ref']['und'][0]['default']['#default_value']) && !empty($form['nid']['#value'])) {
      $form['actions']['clone_public'] = array(
        '#type' => 'submit',
        '#value' => t('Push to public site'),
        '#name' => 'push_public',
        '#validate' => array('node_form_validate'),
        '#submit' => array('node_form_submit', '_farnet_communities_push_public'),
      );
    }
  }
}

/**
 * Callback function of a submit button, clone content and remove OG settings.
 *
 * @param object $form
 *   The form of the original content.
 * @param string $form_state
 *   The form stae of the original content.
 */
function _farnet_communities_push_public($form, &$form_state) {
  global $base_url;
  $node = node_form_submit_build_node($form, $form_state);
  if (empty($node->nid)) {
    return FALSE;
  }

  unset($node->nid);
  unset($node->vid);

  // Reactivate pathauto URL generation.
  $node->path = ['pathauto' => TRUE];

  if (isset($node->og_group_ref)) {
    unset($node->og_group_ref);
  }

  // Create as draft.
  // $node->workbench_moderation_state_new = workbench_moderation_state_none();
  node_save($node);
  $msg = t('The content has been duplicated to a public version available <a href="@link" target="_blank">here</a>.',
      array('@link' => url('node/' . $node->nid)));
  drupal_set_message($msg, 'status');
}

/**
 * Implements hook_context_load_alter().
 */
function farnet_communities_context_load_alter(&$context) {
  if ($context->name === 'communities' && isset($context->reactions['block'])) {
    $context->reactions['block']['blocks']['views-members_list-block_members_list'] = array(
      'module' => 'views',
      'delta' => 'members_list-block_members_list',
      'region' => 'sidebar_left',
      'weight' => '-8',
    );
  }
}
