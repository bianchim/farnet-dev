<?php
/**
 * @file
 * Installs the Farnet taxonomy feature.
 */

/**
 * Implements hook_enable().
 */
function farnet_taxonomy_enable() {
  $t = get_t();

  // Ensure all components exist.
  features_revert_module("farnet_taxonomy");

  // Creates the Farnet themes vocabulary if it does not exist already.
  $vocabulary = taxonomy_vocabulary_machine_name_load('farnet_theme');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
  }
  else {
    $vocabulary = array(
      'name' => 'Farnet Theme',
      'machine_name' => 'farnet_theme',
      'description' => 'Taxonomy for the themes on Farnet',
      'hierarchy' => 0,
      'module' => 'taxonomy',
      'weight' => -10,
    );
    $vocabulary = (object) $vocabulary;
    taxonomy_vocabulary_save($vocabulary);
    $vid = $vocabulary->vid;
  };

  // Imports theme data.
  include_once 'includes/farnet_taxonomy_themes.php';
  $themes_array = farnet_taxonomy_themes();
  save_multilingual_farnet_taxonomy($themes_array, $vid);

  // Creates the Languages spoken vocabulary if it does not exist already.
  $vocabulary = taxonomy_vocabulary_machine_name_load('farnet_languages_spoken');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
  }
  else {
    $vocabulary = array(
      'name' => 'Farnet Languages spoken',
      'machine_name' => 'farnet_languages_spoken',
      'description' => 'Taxonomy for the languages spoken on Farnet',
      'hierarchy' => 0,
      'module' => 'taxonomy',
      'weight' => -4,
    );
    $vocabulary = (object) $vocabulary;
    taxonomy_vocabulary_save($vocabulary);
    $vid = $vocabulary->vid;
  };

  // Imports Languages spoken data.
  include_once 'includes/farnet_taxonomy_languages_spoken.php';
  $languages_spoken_array = farnet_taxonomy_languages_spoken();
  save_multilingual_farnet_taxonomy($languages_spoken_array, $vid);

  // Creates the Farnet Publication Channel vocabulary.
  // If it does not exist already.
  $voc = taxonomy_vocabulary_machine_name_load('farnet_publication_channel');
  if ($voc) {
    $vid = $voc->vid;
  }
  else {
    $voc = array(
      'name' => 'Farnet Publication channel',
      'machine_name' => 'farnet_publication_channel',
      'description' => 'Taxonomy for the Publication channels on Farnet',
      'hierarchy' => 0,
      'module' => 'taxonomy',
      'weight' => -4,
    );
    $voc = (object) $voc;
    taxonomy_vocabulary_save($voc);
    $vid = $voc->vid;
  };

  // Imports Publication Channel data.
  include_once 'includes/farnet_taxonomy_publication_channels.php';
  $publication_channels_array = farnet_taxonomy_publication_channels();
  save_multilingual_farnet_taxonomy($publication_channels_array, $vid);

  // Creates the Farnet Type Event vocabulary if it does not exist already.
  $vocabulary = taxonomy_vocabulary_machine_name_load('farnet_type_event');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
  }
  else {
    $vocabulary = array(
      'name' => 'Farnet Type Event',
      'machine_name' => 'farnet_type_event',
      'description' => 'Taxonomy for the Type of Events on Farnet',
      'hierarchy' => 0,
      'module' => 'taxonomy',
      'weight' => -6,
    );
    $vocabulary = (object) $vocabulary;
    taxonomy_vocabulary_save($vocabulary);
    $vid = $vocabulary->vid;
  };

  // Imports Type Event data.
  include_once 'includes/farnet_taxonomy_type_events.php';
  $type_events_array = farnet_taxonomy_type_events();
  save_multilingual_farnet_taxonomy($type_events_array, $vid);

  // Creates the Farnet Type News vocabulary if it does not exist already.
  $vocabulary = taxonomy_vocabulary_machine_name_load('farnet_type_news');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
  }
  else {
    $vocabulary = array(
      'name' => 'Farnet Type news',
      'machine_name' => 'farnet_type_news',
      'description' => 'Taxonomy for the Type of News on Farnet',
      'hierarchy' => 0,
      'module' => 'taxonomy',
      'weight' => -7,
    );
    $vocabulary = (object) $vocabulary;
    taxonomy_vocabulary_save($vocabulary);
    $vid = $vocabulary->vid;
  };

  // Imports Type News data.
  include_once 'includes/farnet_taxonomy_type_news.php';
  $type_news_array = farnet_taxonomy_type_news();
  save_multilingual_farnet_taxonomy($type_news_array, $vid);

  // Creates the Farnet Type Publication vocabulary.
  // If it does not exist already.
  $voc = taxonomy_vocabulary_machine_name_load('farnet_type_publication');
  if ($voc) {
    $vid = $voc->vid;
  }
  else {
    $voc = array(
      'name' => 'Farnet Type Publication',
      'machine_name' => 'farnet_type_publication',
      'description' => 'Taxonomy for the Type of Publications on Farnet',
      'hierarchy' => 0,
      'module' => 'taxonomy',
      'weight' => -5,
    );
    $voc = (object) $voc;
    taxonomy_vocabulary_save($voc);
    $vid = $voc->vid;
  };

  // Imports Type Publication data.
  include_once 'includes/farnet_taxonomy_type_publications.php';
  $type_pubications_array = farnet_taxonomy_type_publications();
  save_multilingual_farnet_taxonomy($type_pubications_array, $vid);

  drupal_set_message($t('The FARNET Taxonomy feature is now active on your site.'));
}

/**
 * Implements hook_disable().
 */
function farnet_taxonomy_disable() {
  $t = get_t();

  // @TODO Check that the voc is not used and if it is not, run uninstall_hoo in the feature.
  // Deletes the taxonomy term.
  $vocabulary = taxonomy_vocabulary_machine_name_load('farnet_theme');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
    taxonomy_vocabulary_delete($vid);
  }

  // Deletes the taxonomy term.
  $vocabulary = taxonomy_vocabulary_machine_name_load('farnet_faq_category');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
    taxonomy_vocabulary_delete($vid);
  }

  // Deletes the taxonomy term.
  $voc = taxonomy_vocabulary_machine_name_load('farnet_publication_channel');
  if ($voc) {
    $vid = $voc->vid;
    taxonomy_vocabulary_delete($vid);
  }

  // Deletes the taxonomy term.
  $vocabulary = taxonomy_vocabulary_machine_name_load('farnet_type_event');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
    taxonomy_vocabulary_delete($vid);
  }

  // Deletes the taxonomy term.
  $vocabulary = taxonomy_vocabulary_machine_name_load('farnet_type_news');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
    taxonomy_vocabulary_delete($vid);
  }

  // Deletes the taxonomy term.
  $vocabulary = taxonomy_vocabulary_machine_name_load('farnet_type_publication');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
    taxonomy_vocabulary_delete($vid);
  }

  drupal_set_message($t('The FARNET Taxonomy feature is now disabled on your site.'));
}

/**
 * Implements hook_install().
 */
function farnet_taxonomy_install() {
  $t = get_t();
  drupal_set_message($t('The FARNET Taxonomy feature is now installed on your site.'));
}

/**
 * Implements hook_uninstall().
 */
function farnet_taxonomy_uninstall() {
  $t = get_t();
  drupal_set_message($t('The FARNET Taxonomy feature is now uninstalled from your site.'));
}

/**
 * Function to save multilingual on Taxonomy Farnet.
 *
 * @param array $items_array
 *   Items by language component taxonomy.
 * @param int $vid
 *   The id of the $vocabulary.
 */
function save_multilingual_farnet_taxonomy($items_array, $vid) {
  foreach ($items_array as $item) {
    $term = new stdClass();
    $term->vid = $vid;
    $term->name = $item->name;
    $term->language = $item->language;
    taxonomy_term_save($term);

    foreach ($item->translation as $language => $value) {

      $translation = array(
        'translate' => 0,
        'status' => 1,
        // Here is the language you're translating to.
        'language' => $language,
        // Here is the source language.
        'source' => $term->language,
      );

      // I had to load the taxonomy term.
      $org_term = taxonomy_term_load($term->tid);
      // Get the translation handler in place.
      $handler = entity_translation_get_handler('taxonomy_term', $org_term, TRUE);
      $translation['tid'] = $org_term->tid;

      $values = array();
      // Name field.
      $values['name_field'][$language][0]['value'] = $value;

      // Finally you set the translation and save the object.
      $handler->setTranslation($translation, $values);
      taxonomy_term_save($org_term);
    }
  };
}
