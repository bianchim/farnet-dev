<?php

/**
 * @file
 * Code for the Farnet Core feature.
 */

include_once 'farnet_core.features.inc';

define("FARNET_CORE_FORM_PDF_ID", "form-pdfprint-lang");
define("FARNET_CORE_SELECT_PDF_ID", "select-pdfprint-lang");
define("FARNET_CORE_HIDDEN_PDF_ID", "hidden-pdfprint-lang");
define("FARNET_CORE_SUBMIT_PDF_ID", "submit-pdfprint-lang");

/**
 * Implements hook_block_info().
 */
function farnet_core_block_info() {
  $blocks = array();

  $blocks['farnet_core_printpdf'] = array(
    'info' => t('Farnet multilingual pdf generation'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function farnet_core_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'farnet_core_printpdf':
      if ((arg(0) == 'node') && is_numeric(arg(1)) && (arg(2) == NULL)) {
        $block['subject'] = '';
        $block['content'] = drupal_get_form('farnet_core_printpdf_multilingual_form');
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_form().
 */
function farnet_core_printpdf_multilingual_form($form, &$form_state) {
  global $language;

  $node = menu_get_object();
  $language_list = language_list();
  $translations = $node->translations;

  if (is_null($translations->original)) {
    $translations = array($language->language => $language->language);
  }
  else {
    $translations = array_keys($translations->data);
  }

  $options = [];
  foreach ($translations as $langcode) {
    $language_name = locale($language_list[$langcode]->name, NULL, $language->language);
    $options[$langcode] = $language_name;
  }

  $form['#id'] = FARNET_CORE_FORM_PDF_ID;

  // Show the pdf image from the print module.
  $image_variables = array(
    'path' => drupal_get_path('module', 'print_pdf') . "/icons/pdf_icon.png",
    'alt' => 'Print to pdf',
    'title' => 'print to pdf',
    'width' => '16px',
    'height' => '16px',
    'attributes' => array('class' => 'print_pdf_icon'),
  );
  $img = theme('image', $image_variables);

  $node_type_name = node_type_load($node->type)->name;
  $node_type_name = locale($node_type_name, NULL, $language->language);

  $form['content_type_pdf_download'] = array(
    '#markup' => $img . '<div class="print_pdf_text">' . t('@node_type_name in PDF', array('@node_type_name' => $node_type_name)) . '</div>',
  );

  $form['fields_pdf_print'] = array(
    '#type' => 'container',
  );

  $form['fields_pdf_print'][FARNET_CORE_SELECT_PDF_ID] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $language->language,
    '#attributes' => array(
      'id' => FARNET_CORE_SELECT_PDF_ID,
    ),
  );

  $form['fields_pdf_print'][FARNET_CORE_HIDDEN_PDF_ID] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
    '#attributes' => array(
      'id' => FARNET_CORE_HIDDEN_PDF_ID,
    ),
  );

  $form['fields_pdf_print'][FARNET_CORE_SUBMIT_PDF_ID] = array(
    '#type' => 'submit',
    '#value' => t('Download'),
    '#attributes' => array(
      'id' => FARNET_CORE_SUBMIT_PDF_ID,
    ),
  );

  // Add JS and CSS files.
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'farnet_core') . '/css/farnet_core_block.css',
  );

  $settings = array(
    'id_form' => '#' . FARNET_CORE_FORM_PDF_ID,
    'id_select' => '#' . FARNET_CORE_SELECT_PDF_ID,
    'id_hidden' => '#' . FARNET_CORE_HIDDEN_PDF_ID,
    'delimiter' => variable_get('nexteuropa_multilingual_language_suffix_delimiter', '_'),
  );

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'farnet_core') . '/js/farnet_core_block.js',
        array(
          'data' => array('farnet_core' => $settings),
          'type' => 'setting',
        ),
  );

  return $form;
}

/**
 * Hide the comments for nodes on the public site.
 *
 * Implements hook_node_presave().
 */
function farnet_core_node_presave($node) {
  if (isset($node->og_group_ref) && !empty($node->og_group_ref)) {
    $node->comment = COMMENT_NODE_OPEN;
  }
  else {
    $node->comment = COMMENT_NODE_HIDDEN;
  }
}

/**
 * Implements hook_menu_alter().
 */
function farnet_core_menu_alter(&$items) {
  if (isset($items['node/add/community'])) {
    $items['node/add/community']['access callback'] = 'multisite_drupal_toolbox_is_admin';
  }
  if (isset($items['node/add/editorial-team'])) {
    $items['node/add/editorial-team']['access callback'] = 'multisite_drupal_toolbox_is_admin';
  }
  if (isset($items['admin/workbench/create/node/add/community'])) {
    $items['admin/workbench/create/node/add/community']['access callback'] = 'multisite_drupal_toolbox_is_admin';
  }
  if (isset($items['admin/workbench/create/node/add/editorial-team'])) {
    $items['admin/workbench/create/node/add/editorial-team']['access callback'] = 'multisite_drupal_toolbox_is_admin';
  }
}

/**
 * Implements hook_COMPONENT_alter().
 */
function farnet_core_strongarm_alter(&$variables) {
  if (isset($variables['date_first_day'])) {
    $variables['date_first_day']->value = '1';
  }
}

/**
 * Implements hook_easy_breadcrumb_breadcrumb_alter().
 */
function farnet_core_easy_breadcrumb_breadcrumb_alter(&$breadcrumb) {
  foreach ($breadcrumb as $key => $value) {
    if ($value['content'] == 'Flag factsheets') {
      $breadcrumb[$key]['content'] = 'FLAG Factsheets';
    }
  }
}

/**
 * Implements hook_menu_link_alter().
 */
function farnet_core_menu_link_alter(&$item) {

  if (strpos($item['link_path'], 'TOKENUUID_') !== FALSE) {
    $pos = strpos($item['link_path'], 'TOKENUUID_');
    $uuid = (drupal_substr($item['link_path'], $pos + drupal_strlen('TOKENUUID_')));
    // Echo '$uuid:'. $uuid . PHP_EOL;.
    $entities = entity_uuid_load('node', array($uuid));
    if (count($entities) > 0) {
      $entity = reset($entities);
      echo $item['link_title'] . ' => $nid:' . $entity->nid . PHP_EOL;
      $item['link_path'] = 'node/' . $entity->nid;
      // $item['identifier'] = str_replace('TOKENUUID_'.$uuid
      // , 'node/' . $entity->nid, $item['identifier']);
      // var_dump($item);
    }
  }

  if (isset($item['parent_identifier'])) {
    if (strpos($item['parent_identifier'], 'TOKENUUID_') !== FALSE) {
      $pos = strpos($item['parent_identifier'], 'TOKENUUID_');
      $uuid_parent = (drupal_substr($item['parent_identifier'], $pos + drupal_strlen('TOKENUUID_')));
      // Echo '$uuid_parent:'. $uuid_parent . PHP_EOL;.
      $entities = entity_uuid_load('node', array($uuid_parent));
      if (count($entities) > 0) {
        $entity = reset($entities);
        // Echo $item['link_title'].' => $nid_parent:'. $entity->nid . PHP_EOL;.
        $item['parent_identifier'] = str_replace('TOKENUUID_' . $uuid_parent, 'node/' . $entity->nid, $item['parent_identifier']);
      }
    }
  }
}

/**
 * Implements hook_block_block_info_alter().
 */
function farnet_core_block_info_alter(&$blocks, $theme, $code_blocks) {
  $blocks['print_ui']['print-links']['status'] = 0;
  $blocks['print_ui']['print-links']['region'] = '';
}

/**
 * Implements hook_context_load_alter().
 */
function farnet_core_context_load_alter(&$context) {
  if ($context->name == 'homepage') {
    if (isset($context->reactions['block']['blocks']['views-multisite_settings_core-block_1'])) {
      unset($context->reactions['block']['blocks']['views-multisite_settings_core-block_1']);
    }
  }

  /*
  if ($context->name == 'site_wide') {
  unset($context->reactions['block']['blocks']['user-menu']);
  unset($context->reactions['block']['blocks']['create-content-button']);
  }
   */
}
