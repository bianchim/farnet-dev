<?php

/**
 * @file
 * Code for the Farnet Core feature.
 */

include_once 'farnet_core.features.inc';

define("FARNET_CORE_FORM_PDF_ID", "form-pdfprint-lang");
define("FARNET_CORE_SELECT_PDF_ID", "select-pdfprint-lang");
define("FARNET_CORE_HIDDEN_PDF_ID", "hidden-pdfprint-lang");
define("FARNET_CORE_SUBMIT_PDF_ID", "submit-pdfprint-lang");

/**
 * Implements hook_block_info().
 */
function farnet_core_block_info() {
  $blocks = array();

  $blocks['farnet_core_printpdf'] = array(
    'info' => t('Farnet multilingual pdf generation'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function farnet_core_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'farnet_core_printpdf':
      if ((arg(0) == 'node') && is_numeric(arg(1)) && (arg(2) == NULL)) {
        $block['subject'] = '';
        $block['content'] = drupal_get_form('farnet_core_printpdf_multilingual_form');
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_form().
 */
function farnet_core_printpdf_multilingual_form($form, &$form_state) {
  global $language;

  $node = menu_get_object();
  $language_list = language_list();
  $translations = $node->translations;

  if (is_null($translations->original)) {
    $translations = array($language->language => $language->language);
  }
  else {
    $translations = array_keys($translations->data);
  }

  $options = [];
  foreach ($translations as $langcode) {
    $language_name = locale($language_list[$langcode]->name, NULL, $language->language);
    $options[$langcode] = $language_name;
  }

  $form['#id'] = FARNET_CORE_FORM_PDF_ID;

  // Show the pdf image from the print module.
  $image_variables = array(
    'path' => drupal_get_path('module', 'print_pdf') . "/icons/pdf_icon.png",
    'alt' => 'Print to pdf',
    'title' => 'print to pdf',
    'width' => '16px',
    'height' => '16px',
    'attributes' => array('class' => 'print_pdf_icon'),
  );
  $img = theme('image', $image_variables);

  $node_type_name = node_type_load($node->type)->name;
  $node_type_name = locale($node_type_name, NULL, $language->language);

  $form['content_type_pdf_download'] = array(
    '#markup' => $img . '<div class="print_pdf_text">' . t('@node_type_name in PDF', array('@node_type_name' => $node_type_name)) . '</div>',
  );

  $form['fields_pdf_print'] = array(
    '#type' => 'container',
  );

  $form['fields_pdf_print'][FARNET_CORE_SELECT_PDF_ID] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $language->language,
    '#attributes' => array(
      'id' => FARNET_CORE_SELECT_PDF_ID,
    ),
  );

  $form['fields_pdf_print'][FARNET_CORE_HIDDEN_PDF_ID] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
    '#attributes' => array(
      'id' => FARNET_CORE_HIDDEN_PDF_ID,
    ),
  );

  $form['fields_pdf_print'][FARNET_CORE_SUBMIT_PDF_ID] = array(
    '#type' => 'submit',
    '#value' => t('Download'),
    '#attributes' => array(
      'id' => FARNET_CORE_SUBMIT_PDF_ID,
    ),
  );

  // Add JS and CSS files.
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'farnet_core') . '/css/farnet_core_block.css',
  );

  $settings = array(
    'id_form' => '#' . FARNET_CORE_FORM_PDF_ID,
    'id_select' => '#' . FARNET_CORE_SELECT_PDF_ID,
    'id_hidden' => '#' . FARNET_CORE_HIDDEN_PDF_ID,
    'delimiter' => variable_get('nexteuropa_multilingual_language_suffix_delimiter', '_'),
  );

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'farnet_core') . '/js/farnet_core_block.js',
        array(
          'data' => array('farnet_core' => $settings),
          'type' => 'setting',
        ),
  );

  return $form;
}

/**
 * Hide the comments for nodes on the public site.
 *
 * Implements hook_node_presave().
 */
function farnet_core_node_presave($node) {
  if (isset($node->og_group_ref) && !empty($node->og_group_ref)) {
    $node->comment = COMMENT_NODE_OPEN;
  }
  else {
    $node->comment = COMMENT_NODE_HIDDEN;
  }
}

/**
 * Implements hook_menu_alter().
 */
function farnet_core_menu_alter(&$items) {
  if (isset($items['node/add/community'])) {
    $items['node/add/community']['access callback'] = 'multisite_drupal_toolbox_is_admin';
  }
  if (isset($items['node/add/editorial-team'])) {
    $items['node/add/editorial-team']['access callback'] = 'multisite_drupal_toolbox_is_admin';
  }
  if (isset($items['admin/workbench/create/node/add/community'])) {
    $items['admin/workbench/create/node/add/community']['access callback'] = 'multisite_drupal_toolbox_is_admin';
  }
  if (isset($items['admin/workbench/create/node/add/editorial-team'])) {
    $items['admin/workbench/create/node/add/editorial-team']['access callback'] = 'multisite_drupal_toolbox_is_admin';
  }
}

/**
 * Implements hook_COMPONENT_alter().
 */
function farnet_core_strongarm_alter(&$variables) {
  if (isset($variables['date_first_day'])) {
    $variables['date_first_day']->value = '1';
  }
}

/**
 * Implements hook_easy_breadcrumb_breadcrumb_alter().
 */
function farnet_core_easy_breadcrumb_breadcrumb_alter(&$breadcrumb) {
  foreach ($breadcrumb as $key => $value) {
    if ($value['content'] == 'Flag factsheets') {
      $breadcrumb[$key]['content'] = 'FLAG Factsheets';
    }
  }
}

/**
 * Implements hook_menu_link_alter().
 */
function farnet_core_menu_link_alter(&$item) {

  if (strpos($item['link_path'], 'TOKENUUID_') !== FALSE) {
    $pos = strpos($item['link_path'], 'TOKENUUID_');
    $uuid = (drupal_substr($item['link_path'], $pos + drupal_strlen('TOKENUUID_')));
    // Echo '$uuid:'. $uuid . PHP_EOL;.
    $entities = entity_uuid_load('node', array($uuid));
    if (count($entities) > 0) {
      $entity = reset($entities);
      echo $item['link_title'] . ' => $nid:' . $entity->nid . PHP_EOL;
      $item['link_path'] = 'node/' . $entity->nid;
      // $item['identifier'] = str_replace('TOKENUUID_'.$uuid
      // , 'node/' . $entity->nid, $item['identifier']);
      // var_dump($item);
    }
  }

  if (isset($item['parent_identifier'])) {
    if (strpos($item['parent_identifier'], 'TOKENUUID_') !== FALSE) {
      $pos = strpos($item['parent_identifier'], 'TOKENUUID_');
      $uuid_parent = (drupal_substr($item['parent_identifier'], $pos + drupal_strlen('TOKENUUID_')));
      // Echo '$uuid_parent:'. $uuid_parent . PHP_EOL;.
      $entities = entity_uuid_load('node', array($uuid_parent));
      if (count($entities) > 0) {
        $entity = reset($entities);
        // Echo $item['link_title'].' => $nid_parent:'. $entity->nid . PHP_EOL;.
        $item['parent_identifier'] = str_replace('TOKENUUID_' . $uuid_parent, 'node/' . $entity->nid, $item['parent_identifier']);
      }
    }
  }
}

/**
 * Implements hook_block_block_info_alter().
 */
function farnet_core_block_info_alter(&$blocks, $theme, $code_blocks) {
  $blocks['print_ui']['print-links']['status'] = 0;
  $blocks['print_ui']['print-links']['region'] = '';
}

/**
 * Implements hook_preprocess_block().
 */
function farnet_core_preprocess_block(&$variables) {
  if ($variables['block']->module == 'block' && $variables['block']->delta == '12') {
    $variables['block_html_id'] = drupal_html_id('block-quick-links');
  }
}

/**
 * Implements hook_context_load_alter().
 */
function farnet_core_context_load_alter(&$context) {
  if ($context->name == 'homepage') {
    if (isset($context->reactions['block']['blocks']['views-multisite_settings_core-block_1'])) {
      unset($context->reactions['block']['blocks']['views-multisite_settings_core-block_1']);
    }
  }
  if ($context->name == 'site_wide') {
    unset($context->reactions['block']['blocks']['create-content-button']);
    if (isset($context->reactions['block']['blocks']['user-menu'])) {
      $context->reactions['block']['blocks']['user-menu']['region'] = 'header_top';
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 *
 * Declare our contact details field.
 */
function farnet_core_field_extra_fields() {
  $field = [
    'contact_details' => [
      'label' => t('Contact details'),
      'description' => t('A field showing contact(s) from a node.'),
      'weight' => 1000,
    ],
  ];

  // List content types.
  $content_types = _farnet_core_get_contact_details_bundles();

  $extra = [];
  // Add the pseudo field to display.
  foreach ($content_types as $content_type) {
    $extra['node'][$content_type]['display'] = $field;
    $extra['node'][$content_type]['display']['contact_details']['default']['type'] = "visible";
    $extra['node'][$content_type]['display']['contact_details']['default']['weight'] = 1000;
  }

  return $extra;
}

/**
 * Implements hook_node_view().
 *
 * For each configured content type, render the field.
 */
function farnet_core_node_view($node, $view_mode, $langcode) {
  if ($view_mode === "full") {
    $content_types = _farnet_core_get_contact_details_bundles();
    if (in_array($node->type, $content_types)) {
      $node->content['contact_details'] = [
        '#markup' => _farnet_core_display_contact_details($node),
        '#weight' => 1000,
      ];
    }
  }
}

/**
 * Implements hook_COMPONENT_alter().
 *
 * COMPONENT = field_default_field_instances.
 */
function farnet_core_field_default_field_instances_alter(&$fields) {
  foreach ($fields as $field => $info) {
    if (strpos($field, 'group_content_access') || strpos($field, 'og_group_ref')) {
      $fields[$field]['display']['default']['type'] = 'hidden';
    }
  }
}

/**
 * Content types in which contacts are displayed.
 */
function _farnet_core_get_contact_details_bundles() {
  return [
    'cooperation_call',
    'cooperation_idea',
    'factsheet_flag',
    'factsheet_country',
    'gp_method',
    'gp_project',
    'gp_short_story',
  ];
}

/**
 * Render a contact field depending on the node.
 *
 * @param object $node
 *   The current viewed node.
 *
 * @return string
 *   Field output as HTML.
 */
function _farnet_core_display_contact_details($node) {

  $output = '';

  // Start with no value to render.
  $no_value = TRUE;

  // Wrap the node for easier handling.
  $node = entity_metadata_wrapper('node', $node);

  // Contact details cases.
  $organisations = array();
  switch ($node->type->value()) {
    case 'cooperation_call':
      if (isset($node->field_organisations->value()[0])) {
        $organisations = array('organisation' => $node->field_organisations->value()[0]);
      }
      $contact_type = ['Call contact'];
      $contact_label = array('organisation' => 'Organisation');
      break;

    case 'cooperation_idea':
      $organisations = _farnet_core_get_organisations($node);
      $contact_type = ['Manager', 'Cooperation contact'];
      $contact_label = array('flag' => 'FLAG', 'organisation' => 'Organisation');
      break;

    case 'factsheet_flag':
      if (isset($node->field_organisations->value()[0])) {
        $organisations = array('organisation' => $node->field_organisations->value()[0]);
      }
      $contact_type = ['President', 'Manager'];
      $contact_label = array('organisation' => 'Organisation');
      break;

    case 'factsheet_country':
      if (isset($node->field_organisations->value()[0])) {
        $organisations = array('organisation' => $node->field_organisations->value()[0]);
      }
      $contact_type = ['Main contact'];
      $contact_label = array('organisation' => 'Managing Authority');
      break;

    case 'gp_project':
      $organisations = _farnet_core_get_organisations($node);
      $contact_type = ['Manager', 'Project promoter'];
      $contact_label = array('flag' => 'FLAG', 'organisation' => 'Beneficiary');
      break;

    case 'gp_method':
    case 'gp_short_story':
      $organisations = _farnet_core_get_organisations($node);
      $contact_type = ['Manager', 'Project promoter'];
      $contact_label = array('flag' => 'FLAG', 'organisation' => 'Organisation');
      break;

    // Default should never trigger, safety exit here.
    default:
      return '';
  }

  foreach ($organisations as $org_id => $organisation) {
    // Load the organisations.
    $node = entity_metadata_wrapper('node', $organisation);
    $fc_contacts = $node->field_organisation_contacts->value();

    // For each contact field collection, check the contact position.
    foreach ($fc_contacts as $fc_contact) {
      $fc_contact = entity_metadata_wrapper('field_collection_item', $fc_contact);

      $position = $fc_contact->field_organisation_position->value();
      if (empty(array_intersect($contact_type, $position))) {
        continue;
      }
      $position_label = $contact_label[$org_id];

      // Before processing the first contact, add the wrappers.
      if ($no_value) {
        $output = '<fieldset><legend>' . t('Contacts detail') . '</legend>';
        $output .= '<div class="field">';
        $no_value = FALSE;
      }

      // Load the contact info.
      $contact = $fc_contact->field_contact_person->value();
      $contact = entity_metadata_wrapper('node', node_load($contact->nid));

      // Contact fields.
      $fields = [
        'title_field' => FALSE,
        'field_firstname' => FALSE,
        'field_email' => TRUE,
        'field_telephone' => TRUE,
        'field_gender' => FALSE,
        'field_phone_mobile' => TRUE,
        'field_skype_id' => TRUE,
        'field_user_country' => FALSE,
      ];

      $output .= '<div class="field-group-tab"><h3><span>' . $position_label . '</span></h3>';

      $info_contact = $contact->getPropertyInfo();

      // Process each field. If override is set at true, we try to use the
      // organisation value first.
      foreach ($fields as $field => $override) {

        if ($override) {
          $value = $fc_contact->{$field}->value();
        }

        $value = isset($value) && !empty($value) ? $value : $contact->{$field}->value();

        // If the value is an object, then it's a taxonomy term, use it's name.
        if (is_object($value)) {
          $value = $value->name;
        }

        // Create the field markup.
        if (!empty($value)) {
          $list_item = '<div class="field-label">' . $info_contact[$field]['label'] . ': ' . '</div>';
          $list_item .= '<div class="field-items">' . $value . '</div>';

          $output .= $list_item;
        }

        // Unset for the next field checks.
        unset($value);
      }

      $output .= '</div>';
    }
  }

  if (!$no_value) {
    $output .= '</div></fieldset>';
  }
  return $output;
}

/**
 * Return the organisations from the FLAG and the node itself.
 *
 * @param object $node
 *   The current node.
 *
 * @return array
 *   An array of organisation nodes.
 */
function _farnet_core_get_organisations($node) {
  // Only keep the first flag.
  $flag = $node->field_flag->value();

  $organisations = array();
  if (!empty($flag)) {
    $flag = reset($flag);
    $flag = entity_metadata_wrapper('node', $flag);
    // Return flag and current node organisations.
    if (isset($flag->field_organisations->value()[0])) {
      $organisations['flag'] = $flag->field_organisations->value()[0];
    }
    if (isset($node->field_organisations->value()[0])) {
      $organisations['organisation'] = ($node->field_organisations->value()[0]);
    }
    return $organisations;
  }
  // If no flag, return only the node organisations.
  if (isset($node->field_organisations->value()[0])) {
    $organisations = array('organisation' => $node->field_organisations->value()[0]);
  }
  return $organisations;
}

/**
 * Implements hook_post_features_revert().
 */
function farnet_core_post_features_revert($component) {
  if ($component === 'variable') {
    variable_set('node_submitted_page', 0);
    variable_set('node_submitted_community', 0);
    variable_set('node_submitted_editorial_team', 0);
    variable_set('node_submitted_nexteuropa_event', 0);
    variable_set('node_submitted_nexteuropa_faq', 0);
    variable_set('node_submitted_nexteuropa_mediagallery', 0);
    variable_set('node_submitted_nexteuropa_news', 0);
    variable_set('node_submitted_article', 0);
    variable_set('node_submitted_simplenews', 0);
  }
}
