<?php

/**
 * @file
 * Code for the Farnet location module.
 */

/**
 * Used to manage countries names and codes.
 */
include_once drupal_get_path('module', 'farnet_taxonomy') . '/includes/farnet_taxonomy_countries.php';

/**
 * Implements hook_menu().
 */
function farnet_location_menu() {
  $items['admin/config/content/farnet_location'] = [
    'title' => 'Farnet location',
    'description' => 'Configuration for farnet location module',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['farnet_location_admin'],
    'access arguments' => ['access administration pages'],
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['farnet_location/autocomplete'] = [
    'title' => 'Autocomplete for areas',
    'page callback' => '_farnet_location_autocomplete',
    'access arguments' => TRUE,
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Build the module configuration form.
 */
function farnet_location_admin() {
  $form = [];

  $form['geonames_username'] = [
    '#type' => 'textfield',
    '#title' => t('GeoNames webservice username'),
    '#default_value' => variable_get('geonames_username', ''),
    '#required' => TRUE,
  ];

  $form['geonames_maxrows'] = [
    '#type' => 'textfield',
    '#title' => t('Maximum number results per request'),
    '#default_value' => variable_get('geonames_maxrows', 10),
    '#size' => 2,
    '#maxlength' => 2,
    '#required' => TRUE,
  ];

  $form['geonames_baseurl'] = [
    '#type' => 'textfield',
    '#title' => t('Base url for the GeoNames service.'),
    '#default_value' => variable_get('geonames_baseurl', 'http://api.geonames.org/'),
    '#maxlength' => 255,
    '#required' => TRUE,
  ];

  $form['geocoding_baseurl'] = [
    '#type' => 'textfield',
    '#title' => t('Base url for Nexteuropa Webtools geocoding service.'),
    '#default_value' => variable_get('geocoding_baseurl', 'http://europa.eu/webtools/rest/geocoding/'),
    '#maxlength' => 255,
    '#required' => TRUE,
  ];

  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function farnet_location_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Use the title_field that should always be existing to determine language.
  $lang = $form['title_field']['#language'];

  switch ($form_id) {
    case 'gp_method_node_form':
    case 'gp_project_node_form':
    case 'gp_short_story_node_form':
    case 'factsheet_flag_node_form':
      $form['field_latitude']['#type'] = 'hidden';
      $form['field_longitude']['#type'] = 'hidden';
      // Configure the fields.
      $form['field_term_country'][LANGUAGE_NONE]['#attributes']['class'][] = 'country_field_form';

      // Add autocomplete for each region field collection.
      foreach ($form['field_collection_region'][LANGUAGE_NONE] as $region_index => &$region_field) {
        if (is_int($region_index)) {
          $region_field['field_region'][LANGUAGE_NONE][0]['value']['#autocomplete_path'] = 'farnet_location/autocomplete';
          $region_field['field_region'][LANGUAGE_NONE][0]['value']['#attributes']['class'][] = 'region_field_form';

          // Add autocomplete for each area field.
          foreach ($region_field['field_area'][LANGUAGE_NONE] as $area_index => &$area_field) {
            if (is_int($area_index)) {
              $area_field['value']['#autocomplete_path'] = 'farnet_location/autocomplete';
              $area_field['value']['#attributes']['class'][] = 'area_field_form';
            }
          }
        }
      }

      $js_settings = [
        // Convert undefined form language to english for GeoNames.
        'form_lang' => $lang === 'und' ? 'en' : $lang,
      ];

      // Attach the javascript to the form.
      $form['#attached']['js'][] = [
        'data' => ['farnet_location' => $js_settings],
        'type' => 'setting',
      ];

      $form['#attached']['js'][] = [
        'data' => drupal_get_path('module', 'farnet_location') . '/js/farnet_location.js',
        'type' => 'file',
      ];
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function farnet_location_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_register_form':
    case 'user_profile_form':
      $postal_code = isset($form_state['values']['field_zip_code'][LANGUAGE_NONE][0]['value']) ? $form_state['values']['field_zip_code'][LANGUAGE_NONE][0]['value'] : 0;
      $country_selected_tid = isset($form_state['values']['field_user_country'][LANGUAGE_NONE][0]['tid']) ? $form_state['values']['field_user_country'][LANGUAGE_NONE][0]['tid'] : 0;
      $field_city_select_default_value = isset($form_state['values']['field_city_select']) ? $form_state['values']['field_city_select'] : '';

      if (($form_id == 'user_profile_form') && ($postal_code == 0)) {
        $postal_code = $form['field_zip_code'][LANGUAGE_NONE][0]['value']['#default_value'];
      }

      $form['field_zip_code'][LANGUAGE_NONE][0]['value']['#ajax'] = array(
        'event' => 'change',
        'callback' => 'farnet_location_depend_dropdown_callback',
        'wrapper' => 'dropdown-field-city-select',
      );

      if (($form_id == 'user_profile_form') && ($country_selected_tid == 0)) {
        $country_selected_tid = isset($form['field_user_country'][LANGUAGE_NONE]['#default_value'][0]) ? $form['field_user_country'][LANGUAGE_NONE]['#default_value'][0] : 0;
      }

      $country_selected = '';
      if ($country_selected_tid > 0) {
        $term = taxonomy_term_load($country_selected_tid);
        $country_selected = $term->name;
      }

      $form['field_user_country'][LANGUAGE_NONE]['#ajax'] = array(
        'event' => 'change',
        'callback' => 'farnet_location_depend_dropdown_callback',
        'wrapper' => 'dropdown-field-city-select',
      );

      $form['field_city_select'][LANGUAGE_NONE]['#title'] = 'City';
      $form['field_city_select'][LANGUAGE_NONE]['#type'] = 'select';
      $form['field_city_select'][LANGUAGE_NONE]['#prefix'] = '<div id="dropdown-field-city-select">';
      $form['field_city_select'][LANGUAGE_NONE]['#suffix'] = '</div>';
      $form['field_city_select'][LANGUAGE_NONE]['#options'] = _farnet_location_get_field_city_select_dropdown($country_selected, $postal_code);
      if (($form_id == 'user_profile_form') && ($field_city_select_default_value == '')) {
        if (isset($form['#user']->field_city_select[LANGUAGE_NONE][0]['value'])) {
          $field_city_select_default_value = $form['#user']->field_city_select[LANGUAGE_NONE][0]['value'];
          $form['field_city_select'][LANGUAGE_NONE]['#default_value'] = $field_city_select_default_value;
        }
      }
      break;

    case 'factsheet_flag_node_form':
      $form['field_interactive_map']['#type'] = 'hidden';
      break;

    case 'factsheet_country_node_form':
      $form['field_interactive_map']['#type'] = 'hidden';
      break;

    case 'organisation_node_form':
      $form['field_latitude']['#type'] = 'hidden';
      $form['field_longitude']['#type'] = 'hidden';
      break;
  }
}

/**
 * Implements hook_node_submit().
 */
function farnet_location_node_submit($node, $form, &$form_state) {
  // Manage the field area and the coordinates.
  switch ($node->type) {
    case 'gp_method':
    case 'gp_project':
    case 'gp_short_story':
    case 'factsheet_flag':
      // Remove previous values.
      $node->field_latitude[LANGUAGE_NONE] = array();
      $node->field_longitude[LANGUAGE_NONE] = array();

      // If no country was set, abort the process.
      if (!isset($form_state['values']['field_term_country'][LANGUAGE_NONE][0])) {
        break;
      }

      // Get form info.
      $lang = $form_state['values']['language'];
      $country = $form_state['values']['field_term_country'][LANGUAGE_NONE][0]['name'];

      // For each area, store the geolocation.
      foreach ($node->field_collection_region[LANGUAGE_NONE] as $region) {
        $areas = isset($region['field_area'][$lang]) ? $region['field_area'][$lang] : $region['field_area'][LANGUAGE_NONE];
        foreach ($areas as $area_index => $area) {
          if (!is_int($area_index) || empty($area['value'])) {
            continue;
          }

          $city = $area['value'];
          // $output = _farnet_location_geocoding($city . ', ' . $country);.
          $output = _farnet_location_geocoding_by_city($lang, $country, $city);
          if ($output && is_array($output)) {
            $longitude = $output['lng'];
            $latitude = $output['lat'];
            $node->field_longitude[LANGUAGE_NONE][$area_index]['value'] = $longitude;
            $node->field_latitude[LANGUAGE_NONE][$area_index]['value'] = $latitude;
          }
          else {
            drupal_set_message(t("The coordinates of :city could not be set. Please set it manually or contact an administrator.", array(':city' => $city)), 'warning');
          }
        }
      }
      break;
  }

  switch ($node->type) {
    case 'organisation':
      $address_1 = isset($node->field_address_1[LANGUAGE_NONE][0]['value']) ? $node->field_address_1[LANGUAGE_NONE][0]['value'] : '';
      $address_2 = isset($node->field_address_2[LANGUAGE_NONE][0]['value']) ? $node->field_address_2[LANGUAGE_NONE][0]['value'] : '';
      $city = isset($node->field_city[LANGUAGE_NONE][0]['value']) ? $node->field_city[LANGUAGE_NONE][0]['value'] : '';
      $zip_code = isset($node->field_zip_code[LANGUAGE_NONE][0]['value']) ? $node->field_zip_code[LANGUAGE_NONE][0]['value'] : '';
      $country = isset($node->field_term_country[LANGUAGE_NONE][0]['name']) ? $node->field_term_country[LANGUAGE_NONE][0]['name'] : '';
      if ((!empty($address_1) || !empty($address_2)) && (!empty($city) || !empty($zip_code)) && !empty($country)) {
        $address = (isset($address_1) ? $address_1 . ', ' : '') . (isset($address_2) ? $address_2 . ', ' : '') .
            (isset($zip_code) ? $zip_code . ' ' : '') . (isset($city) ? $city . ', ' : '') . $country;
        $output = _farnet_location_geocoding($address);
        if ($output && is_array($output)) {
          $longitude = $output[0];
          $latitude = $output[1];
          $node->field_longitude[LANGUAGE_NONE][0]['value'] = $longitude;
          $node->field_latitude[LANGUAGE_NONE][0]['value'] = $latitude;
        }
        else {
          drupal_set_message(t("The coordinates of this :address could not be set. Please set them manually or contact an administrator.", array(':address' => $address)), 'warning');
        }
      }
      break;

    case 'factsheet_flag':
      global $base_url;
      $country = isset($node->field_term_country[LANGUAGE_NONE][0]['name']) ? $node->field_term_country[LANGUAGE_NONE][0]['name'] : '';
      $country_id = isset($node->field_term_country[LANGUAGE_NONE][0]['tid']) ? $node->field_term_country[LANGUAGE_NONE][0]['tid'] : '';

      $output_country = _farnet_location_geocoding($country);

      // Default: Brussels, Belgium.
      $longitude_country = 4.35171;
      $latitude_country = 50.85034;
      if ($output_country && is_array($output_country)) {
        $longitude_country = $output_country[0];
        $latitude_country = $output_country[1];
      }
      else {
        drupal_set_message(t("The coordinates of :country could not be set. Please set it manually or contact an administrator.", array(':country' => $country)), 'warning');
      }
      $json_map = '{
        "service": "map",
        "sidebar": {
          "options": {
            "collapse": true
          }
        },
        "map": {
          "zoom": "4",
          "center": [
            "' . $latitude_country . '",
            "' . $longitude_country . '"
          ]
        },
        "layers": [
          {
            "checkbox": {
              "label": "Elements",
              "features": [
                {
                  "label": "FLAG Factsheet",
                  "checked" : true,
                  "markers": [
                    "' . $base_url . '/on-the-ground/map/factsheet_flag/' . $country_id . '"
                  ]
                }
              ]
            }
          }
        ]
      }';
      $node->field_interactive_map[LANGUAGE_NONE][0]['value'] = $json_map;
      break;

    case 'factsheet_country':
      global $base_url;
      $country = isset($node->field_term_country[LANGUAGE_NONE][0]['name']) ? $node->field_term_country[LANGUAGE_NONE][0]['name'] : '';
      $country_id = isset($node->field_term_country[LANGUAGE_NONE][0]['tid']) ? $node->field_term_country[LANGUAGE_NONE][0]['tid'] : '';
      $output_country = _farnet_location_geocoding($country);
      // Default: Brussels, Belgium.
      $longitude_country = 4.35171;
      $latitude_country = 50.85034;
      if ($output_country && is_array($output_country)) {
        $longitude_country = $output_country[0];
        $latitude_country = $output_country[1];
      }
      else {
        drupal_set_message(t("The coordinates of :country could not be set. Please set it manually or contact an administrator.", array(':country' => $country)), 'warning');
      }
      $json_map = '{
        "service": "map",
        "sidebar": {
          "options": {
            "collapse": true
          }
        },
        "map": {
          "zoom": "4",
          "center": [
            "' . $latitude_country . '",
            "' . $longitude_country . '"
          ]
        },
        "layers": [
          {
            "checkbox": {
              "label": "Elements",
              "features": [
                {
                  "label": "FLAG Factsheet",
                  "checked" : true,
                  "markers": [
                    "' . $base_url . '/on-the-ground/map/factsheet_flag/' . $country_id . '"
                  ]
                },
                {
                  "label": "GP Method",
                  "checked" : true,
                  "markers": [
                    "' . $base_url . '/on-the-ground/map/gp_method/' . $country_id . '"
                  ],
                  "options": {
                    "color": "green"
                  }
                },
                {
                  "label": "GP Project",
                  "checked" : true,
                  "markers": [
                    "' . $base_url . '/on-the-ground/map/gp_project/' . $country_id . '"
                  ],
                  "options": {
                    "color": "red"
                  }
                },
                {
                  "label": "GP Short Story",
                  "checked" : true,
                  "markers": [
                    "' . $base_url . '/on-the-ground/map/gp_short_story/' . $country_id . '"
                  ],
                  "options": {
                    "color": "yellow"
                  }
                }
              ]
            }
          }
        ]
      }';
      $node->field_interactive_map[LANGUAGE_NONE][0]['value'] = $json_map;
      break;
  }
}

/**
 * Query the GeoNames database.
 *
 * @param string $country
 *   The country in which we search.
 * @param string $region
 *   The region in which we search.
 * @param string $search
 *   The current search string.
 */
function _farnet_location_autocomplete($lang, $country, $region, $search) {
  // Define if it is a first level or second level search.
  if (!isset($search)) {
    $search = $region;
    unset($region);
  }

  // API options.
  $username = variable_get('geonames_username', FALSE);
  $maxrows = variable_get('geonames_maxrows', 10);

  // Reverse search of the country to get its country code.
  $country_code = _farnet_location_get_country_code($country);

  // If searching for an area, change the administrative level.
  if (isset($region)) {
    $region = _farnet_location_get_region_code($lang, $region, $country_code);
  }

  // Return an empty array on any error.
  if ($username === FALSE || (int) $maxrows < 1 || $country_code === FALSE || $region === FALSE) {
    drupal_json_output([]);
    return;
  }

  // Do the search.
  $params = [
    'name_startsWith' => check_plain($search),
    'maxRows' => $maxrows,
    'username' => $username,
    'type' => 'json',
    'country' => $country_code,
    'style' => 'FULL',
    'lang' => strtoupper($lang),
  ];

  if (isset($region)) {
    $params['featureClass'] = 'P';
  }
  else {
    $params['fcode'] = 'adm1';
  }

  // Filter by region if available.
  if ($region !== FALSE) {
    $params['adminCode1'] = $region;
  }

  $base_url = variable_get('geonames_baseurl', 'http://api.geonames.org/');
  $url = $base_url . 'search?' . http_build_query($params);

  if (!$geolocs = _farnet_location_get_geonames_result($url)) {
    drupal_json_output([]);
    return;
  }

  $result = [];
  foreach ($geolocs['geonames'] as $geoname) {
    // Filter out results for administrative regions outside the country.
    // For exemple : French Guiana.
    if ($geoname['countryCode'] !== $country_code) {
      continue;
    }

    // Check all alternatives names for the current name, else use the default
    // name returned by geoname.
    $name = NULL;
    if (isset($geoname['alternateNames'])) {
      foreach ($geoname['alternateNames'] as $alt_name) {
        if (strtoupper($alt_name['lang']) === strtoupper($lang)) {
          $name = $alt_name['name'];
        }
      }
    }

    $name = is_null($name) ? $geoname['name'] : $name;

    $result[$name] = $name;

  }

  drupal_json_output($result);
}

/**
 * Query the GeoNames database.
 *
 * @param string $lang
 *   The lang in which we search.
 * @param string $country
 *   The country in which we search.
 * @param string $city
 *   The current city for the search.
 *
 * @return bool | array
 *   Return the the array with latitude and longitude for the city of FALSE.
 */
function _farnet_location_geocoding_by_city($lang, $country, $city) {
  // Fcode is used to determine the administrative level of the target search.
  $fcode = 'adm4';

  // API options.
  $username = variable_get('geonames_username', FALSE);
  $maxrows = 1;

  // Reverse search of the country to get its country code.
  $country_code = _farnet_location_get_country_code($country);

  // Return an empty array on any error.
  if ($username === FALSE || $country_code === FALSE || $city === FALSE) {
    drupal_json_output([]);
    return FALSE;
  }

  // Do the search.
  $params = [
    'name_equals' => check_plain($city),
    'maxRows' => $maxrows,
    'username' => $username,
    'type' => 'json',
    'country' => $country_code,
    'fcode' => $fcode,
    'style' => 'SHORT',
    'lang' => strtoupper($lang),
  ];

  $base_url = variable_get('geonames_baseurl', 'http://api.geonames.org/');
  $url = $base_url . 'search?' . http_build_query($params);

  if (!$geolocs = _farnet_location_get_geonames_result($url)) {
    return FALSE;
  }

  $result = [];
  foreach ($geolocs['geonames'] as $geoname) {
    $result['lng'] = $geoname['lng'];
    $result['lat'] = $geoname['lat'];
  }

  return $result;
}

/**
 * Get the code of a country from its name.
 *
 * @param string $country
 *   The name of the country term.
 *
 * @return bool | string
 *   Return the country code of FALSE.
 */
function _farnet_location_get_country_code($country) {
  // Get country code from farnet Taxonomy.
  $countries = farnet_taxonomy_countries();
  $countries = call_user_func_array('array_merge', $countries);
  $countries = array_flip($countries);

  if (!isset($countries[$country])) {
    return FALSE;
  }

  return $countries[$country];
}

/**
 * Get the GeoNames code of a region from its name.
 *
 * @param string $region
 *   The name of  the region to get.
 *
 * @return int
 *   The GeoNames id of the target region.
 */
function _farnet_location_get_region_code($lang, $region, $country_code) {
  $params = [
    'name_equals' => check_plain($region),
    'maxrows' => 1,
    'username' => $username = variable_get('geonames_username'),
    'type' => 'json',
    'country' => $country_code,
    'fcode' => 'adm1',
    'style' => 'LONG',
    'lang' => $lang,
  ];

  $base_url = variable_get('geonames_baseurl', 'http://api.geonames.org/');
  $url = $base_url . 'search?' . http_build_query($params);

  if (!$geolocs = _farnet_location_get_geonames_result($url)) {
    return FALSE;
  }

  $result = reset($geolocs['geonames']);

  if ((int) $geolocs['totalResultsCount'] < 1) {
    return FALSE;
  }

  return $result['adminCode1'];
}

/**
 * Query the Geooding database.
 *
 * @param string $address
 *   The full address (street, number, zip, city, country).
 */
function _farnet_location_geocoding($address) {
  $params = [
    'address' => $address,
    'mode' => 1,
  ];

  $base_url = variable_get('geocoding_baseurl', 'http://europa.eu/webtools/rest/geocoding/');
  $url = $base_url . '?' . http_build_query($params);

  if (!$geolocs = _farnet_location_get_geonames_result($url)) {
    return FALSE;
  }

  if (isset($geolocs['geocodingRequestsCollection'][0])) {
    $geoloc = $geolocs['geocodingRequestsCollection'][0];
    if (isset($geoloc['responseMessage']) && $geoloc['responseMessage'] === 'OK'
        && isset($geoloc['result']['features'][0]['geometry']['coordinates'])) {
      $coordinates = $geoloc['result']['features'][0]['geometry']['coordinates'];
      return $coordinates;
    }
  }
  return FALSE;
}

/**
 * Get the GeoNames list of cities for a postcode from a country.
 *
 * @param int $postal_code
 *   The code postal of cities in a country.
 * @param string $country_code
 *   The code of the country to get.
 *
 * @return array $result
 *   The GeoNames list of cities for a postal code for a specific country.
 */
function _farnet_location_get_cities_list_from_postal_code($postal_code, $country_code) {
  global $language;

  // API options.
  $username = variable_get('geonames_username', FALSE);

  if (strlen($username) > 0) {
    $params = [
      'postalcode' => check_plain($postal_code),
      'maxrows' => 50,
      'username' => $username,
      'type' => 'json',
      'country' => $country_code,
      'style' => 'SHORT',
      'lang' => $language->language,
    ];

    $base_url = variable_get('geonames_baseurl', 'http://api.geonames.org/');
    $url = $base_url . 'postalCodeSearch?' . http_build_query($params);

    if (!$geolocs = _farnet_location_get_geonames_result($url)) {
      return [];
    }

    $result = [];
    foreach ($geolocs['postalCodes'] as $geoname) {
      $result[$geoname['placeName']] = $geoname['placeName'];
    }
  }
  else {
    drupal_set_message('API geonames_username not configured !', 'error');
    $result = [];
  }
  return (array) $result;
}

/**
 * Callback function for ajax dropdown.
 */
function farnet_location_depend_dropdown_callback($form, $form_state) {
  return $form['field_city_select'];
}

/**
 * Function for dropdown options.
 *
 * @param string $country_selected
 *   The country in which we search.
 * @param int $postal_code
 *   The code postal in which we search.
 *
 * @return array $result
 *   The GeoNames list of cities for a postal code for a specific country.
 */
function _farnet_location_get_field_city_select_dropdown($country_selected, $postal_code) {

  if ($postal_code > 0 && (strlen($country_selected) > 0)) {
    // Reverse search of the country to get its country code.
    $country_code = _farnet_location_get_country_code($country_selected);
    $result = _farnet_location_get_cities_list_from_postal_code($postal_code, $country_code);
  }
  else {
    $result = array();
  }

  return $result;
}

/**
 * Get the result of a GeoName request, and handle errors.
 *
 * @param string $url
 *   The GeoNames url called.
 *
 * @return bool | array
 *   Returns the result or FALSE if no result could be returned.
 */
function _farnet_location_get_geonames_result($url) {
  $response = drupal_http_request($url);
  $geolocs = drupal_json_decode($response->data);

  // If an error occurred during JSON processing, log error and quit.
  if (json_last_error() !== JSON_ERROR_NONE) {
    $variables = [
      '@code' => $response->code,
      '@url' => $url,
      '@response' => $response->data,
    ];

    $message = [
      'GeoNames return was not a valid json',
      'response code : @code',
      'request url : @url',
      'response : @response',
    ];

    watchdog('GeoNames', implode('<br/>', $message), $variables, WATCHDOG_ERROR);
    return FALSE;
  }

  // If GeoNames returned an error, log it and quit.
  if (_farnet_location_get_geonames_error($geolocs, $url)) {
    return FALSE;
  }

  return $geolocs;
}

/**
 * Check the GeoNames return value for any error.
 *
 * @param array $json
 *   The tested GeoNames return value.
 * @param string $url
 *   The url called, used for error logging only.
 *
 * @return bool
 *    Returns TRUE if an error was found, else FALSE.
 */
function _farnet_location_get_geonames_error($json, $url) {
  // GeoNames webservices error codes.
  // See : http://www.geonames.org/export/webservice-exception.html.
  $errors = [
    '10' => 'Authorization Exception',
    '11' => 'record does not exist',
    '12' => 'other error',
    '13' => 'database timeout',
    '14' => 'invalid parameter',
    '15' => 'no result found',
    '16' => 'duplicate exception',
    '17' => 'postal code not found',
    '18' => 'daily limit of credits exceeded',
    '19' => 'hourly limit of credits exceeded',
    '20' => 'weekly limit of credits exceeded',
    '21' => 'invalid input',
    '22' => 'server overloaded exception',
    '23' => 'service not implemented',
  ];

  // Log error if applicable.
  if (isset($json['status'])) {
    $message = [
      'GeoNames error : @error',
      'Message : @message',
      'url called : @url',
    ];

    $vars = [
      '@error' => $errors[$json['status']['value']],
      '@message' => $json['status']['message'],
      '@url' => $url,
    ];

    watchdog('GeoNames', implode('<br/>', $message), $vars, WATCHDOG_ERROR);
    return TRUE;
  }

  return FALSE;
}
