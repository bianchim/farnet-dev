<?php

/**
 * @file
 * Code for the Farnet location module.
 */

/**
 * Used to manage countries names and codes.
 */
include_once drupal_get_path('module', 'farnet_taxonomy') . '/includes/farnet_taxonomy_countries.php';

/**
 * Implements hook_menu().
 */
function farnet_location_menu() {
  $items['admin/config/content/farnet_location'] = [
    'title' => 'Farnet location',
    'description' => 'Configuration for farnet location module',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['farnet_location_admin'],
    'access arguments' => ['access administration pages'],
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['farnet_location/autocomplete'] = [
    'title' => 'Autocomplete for areas',
    'page callback' => '_farnet_location_autocomplete',
    'access arguments' => TRUE,
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Build the module configuration form.
 */
function farnet_location_admin() {
  $form = [];

  $form['geonames_username'] = [
    '#type' => 'textfield',
    '#title' => t('GeoNames webservice username'),
    '#default_value' => variable_get('geonames_username', ''),
    '#required' => TRUE,
  ];

  $form['geonames_maxrows'] = [
    '#type' => 'textfield',
    '#title' => t('Maximum number results per request'),
    '#default_value' => variable_get('geonames_maxrows', 10),
    '#size' => 2,
    '#maxlength' => 2,
    '#required' => TRUE,
  ];

  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function farnet_location_form_node_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'factsheet_flag_node_form':
      $form['field_region'][LANGUAGE_NONE][0]['value']['#autocomplete_path'] = 'farnet_location/autocomplete';
      $form['field_area'][LANGUAGE_NONE][0]['value']['#autocomplete_path'] = 'farnet_location/autocomplete';

      // Manage form states.
      $form['field_region']['#states']['enabled'] = [':input[name="field_term_country[und]"]' => ['empty' => FALSE]];
      $form['field_area']['#states']['enabled'] = [':input[name="field_term_country[und]"]' => ['empty' => FALSE]];

      $form['#attached']['js'] = array(
        drupal_get_path('module', 'farnet_location') . '/js/farnet_location.js',
      );
      break;
  }
}

/**
 * Query the GeoNames database.
 *
 * @param string $country
 *   The country in which we search.
 * @param string $region
 *   The region in which we search.
 * @param string $search
 *   The current search string.
 */
function _farnet_location_autocomplete($country, $region, $search) {
  global $language;

  // Define if it is a first level or second level search.
  if (!isset($search)) {
    $search = $region;
    $region = NULL;
  }

  // Fcode is used to determine the administrative level of the target search.
  $fcode = 'adm1';

  // API options.
  $username = variable_get('geonames_username', FALSE);
  $maxrows = variable_get('geonames_maxrows', 10);

  // Reverse search of the country to get its country code.
  $country_code = _farnet_location_get_country_code($country);

  // If searche for an area, we look back for the region in the GN database.
  if (isset($region)) {
    $region = _farnet_location_get_region_code($region, $country_code);
    $fcode = 'adm4';
  }

  // Return an empty array on any error.
  if ($username === FALSE || (int) $maxrows < 1 || $country_code === FALSE || $region === FALSE) {
    drupal_json_output([]);
    exit;
  }

  // Do the search.
  $params = [
    'q' => check_plain($search),
    'maxRows' => $maxrows,
    'username' => $username,
    'type' => 'json',
    'country' => $country_code,
    'fcode' => $fcode,
    'style' => 'FULL',
    'lang' => $language->language,
  ];

  $geolocs = drupal_http_request('http://api.geonames.org/search?' . http_build_query($params));
  $geolocs = drupal_json_decode($geolocs->data);

  $result = [];
  foreach ($geolocs['geonames'] as $geoname) {
    // If not part of the current region, skip.
    if (isset($region) && (int) $geoname['adminId1'] !== $region) {
      continue;
    }

    $result[$geoname['name']] = $geoname['name'];
  }

  drupal_json_output($result);
}

/**
 * Get the code of a country from its name.
 *
 * @param string $country
 *   The name of the country term.
 *
 * @return bool | string
 *   Return the country code of FALSE.
 */
function _farnet_location_get_country_code($country) {
  // Get country code from farnet Taxonomy.
  $countries = farnet_taxonomy_countries();
  $countries = call_user_func_array('array_merge', $countries);
  $countries = array_flip($countries);

  if (!isset($countries[$country])) {
    return FALSE;
  }

  return $countries[$country];
}

/**
 * Get the GeoNames code of a region from its name.
 *
 * @param string $region
 *   The name of  the region to get.
 *
 * @return int
 *   The GeoNames id of the target region.
 */
function _farnet_location_get_region_code($region, $country_code) {
  global $language;

  $params = [
    'name_equals' => check_plain($region),
    'maxrows' => 1,
    'username' => $username = variable_get('geonames_username'),
    'type' => 'json',
    'country' => $country_code,
    'fcode' => 'adm1',
    'style' => 'SHORT',
    'lang' => $language->language,
  ];

  $url = 'http://api.geonames.org/search?' . http_build_query($params);

  $geolocs = drupal_http_request($url);
  $geolocs = drupal_json_decode($geolocs->data);
  $result = reset($geolocs['geonames']);

  return (int) $result['geonameId'];
}
